# Form implementation generated from reading ui file 'giaodien_crud1.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
import subprocess
import pandas as pd
import pyodbc
from sqlalchemy import create_engine

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        # Connect button actions
        self.pushButton.clicked.connect(self.update_price)
        self.pushButton_2.clicked.connect(self.add_price)
        self.pushButton_3.clicked.connect(self.delete_price)
        self.pushButton_4.clicked.connect(self.merge_data)
        self.pushButton_5.clicked.connect(self.update_analysis_data)
        self.pushButton_6.clicked.connect(self.update_push_data)
        self.pushButton_7.clicked.connect(self.update_discount)
        self.pushButton_8.clicked.connect(self.export_push_data)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(162, 270, 151, 41))
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(330, 270, 151, 41))
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(500, 270, 151, 41))
        self.pushButton_3.setObjectName("pushButton_3")

        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(170, 40, 471, 31))
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(660, 520, 121, 21))
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")

        self.pushButton_4 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(160, 190, 151, 41))
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(160, 350, 151, 41))
        self.pushButton_5.setObjectName("pushButton_5")

        self.pushButton_6 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(160, 420, 151, 41))
        self.pushButton_6.setObjectName("pushButton_6")

        self.pushButton_7 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(330, 420, 151, 41))  # Vị trí bên cạnh pushButton_6
        self.pushButton_7.setObjectName("pushButton_7")

        self.pushButton_8 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(500, 420, 151, 41))  # Vị trí bên cạnh pushButton_7
        self.pushButton_8.setObjectName("pushButton_8")

        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(70, 200, 55, 16))
        self.label_3.setObjectName("label_3")

        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(70, 280, 55, 16))
        self.label_4.setObjectName("label_4")

        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(70, 360, 55, 16))
        self.label_5.setObjectName("label_5")

        self.label_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(70, 430, 55, 16))
        self.label_6.setObjectName("label_6")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Cập nhật giá bán"))
        self.pushButton_2.setText(_translate("MainWindow", "Thêm giá bán "))
        self.pushButton_3.setText(_translate("MainWindow", "Xóa giá bán"))
        self.label.setText(_translate("MainWindow",
                                      "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">PHẦN MỀM CHỈNH SỬA BẢNG GIÁ TỰ ĐỘNG</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:6pt;\">Bản quyền Gia Bao</span></p></body></html>"))
        self.pushButton_4.setText(_translate("MainWindow", "Gộp dữ liệu file chốt giá"))
        self.pushButton_5.setText(_translate("MainWindow", "Update data phân tích"))
        self.pushButton_6.setText(_translate("MainWindow", "Update data push"))
        self.pushButton_7.setText(_translate("MainWindow", "Update giảm giá"))  # Đặt tên cho nút mới
        self.pushButton_8.setText(_translate("MainWindow", "Xuất file push"))
        self.label_3.setText(_translate("MainWindow", "Bước 1."))
        self.label_4.setText(_translate("MainWindow", "Bước 2."))
        self.label_5.setText(_translate("MainWindow", "Bước 3."))
        self.label_6.setText(_translate("MainWindow", "Bước 4."))


    def showMessageBox(self, title, message):
        msg_box = QtWidgets.QMessageBox()
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.setIcon(QtWidgets.QMessageBox.Icon.Information)  # Set icon to Information
        msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)  # OK button
        msg_box.exec()



    def update_price(self):
        file_path = 'C:/Users/Admin/Downloads/merge_gia.xlsx'
        df = pd.read_excel(file_path)

        # Chuyển đổi cột Mahang từ float64 sang string
        df['Mahang'] = df['Mahang'].astype(str)

        # Kiểm tra và chuyển đổi kiểu dữ liệu của cột GIA thành số nguyên
        df['GIA'] = pd.to_numeric(df['GIA'], errors='coerce')  # Chuyển đổi giá trị thành số hoặc NaN
        df = df.dropna(subset=['GIA'])  # Loại bỏ các dòng có giá trị NaN trong cột GIA
        df['GIA'] = df['GIA'].astype(int)  # Chuyển đổi các giá trị còn lại thành số nguyên

        # Kiểm tra kiểu dữ liệu của các cột
        print(df.dtypes)  # Để kiểm tra kiểu dữ liệu của từng cột

        conn_str = (
            r'DRIVER={SQL Server};'
            r'SERVER=XPS7590;'  # Thay đổi tên server của bạn
            r'DATABASE=UNIS_DATA;'  # Thay đổi tên cơ sở dữ liệu của bạn
            r'Trusted_Connection=yes;'  # Sử dụng Windows Authentication
        )

        try:
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()

            for index, row in df.iterrows():
                check_query = """
                        SELECT COUNT(*)
                        FROM Phantichgia_state1
                        WHERE Macn = ? AND Mahang = ? AND Loai = ?
                        """
                check_values = (str(row['Macn']), row['Mahang'], row['Loai'])
                cursor.execute(check_query, check_values)
                exists = cursor.fetchone()[0]

                if exists > 0:
                    sql_update_query = """
                            UPDATE Phantichgia_state1
                            SET GIA = ?, dvt = ?
                            WHERE Macn = ? AND Mahang = ? AND Loai = ?
                            """
                    values = (row['GIA'], row['dvt'], str(row['Macn']), row['Mahang'], row['Loai'])
                    try:
                        cursor.execute(sql_update_query, values)
                    except pyodbc.Error as update_error:
                        print(f"Error occurred during update: {update_error}")
                        continue

            conn.commit()
            self.showMessageBox("Cập nhật thành công", "Dữ liệu đã được cập nhật thành công!")

        except pyodbc.Error as e:
            print(f"Error occurred: {e}")
            self.showMessageBox("Lỗi", "Đã xảy ra lỗi khi cập nhật dữ liệu.")

        finally:
            cursor.close()
            conn.close()

    def add_price(self):
        file_path = 'C:/Users/Admin/Downloads/merge_gia.xlsx'
        df = pd.read_excel(file_path)

        # Chỉ định kiểu dữ liệu cho từng cột
        df['Macn'] = df['Macn'].astype(str)
        df['Mahang'] = df['Mahang'].astype(str)
        df['dvt'] = df['dvt'].astype(str)
        df['Loai'] = df['Loai'].astype(str)

        # Chuyển đổi giá trị của cột GIA sang kiểu số nguyên
        try:
            df['GIA'] = pd.to_numeric(df['GIA'], errors='coerce').astype('Int64')
        except ValueError as e:
            print(f"Error converting 'GIA' column to numeric: {e}")
            self.showMessageBox("Lỗi", "Đã xảy ra lỗi khi chuyển đổi cột 'GIA'.")
            return

        conn_str = (
            r'DRIVER={SQL Server};'
            r'SERVER=XPS7590;'  # Thay đổi tên server của bạn
            r'DATABASE=UNIS_DATA;'  # Thay đổi tên cơ sở dữ liệu của bạn
            r'Trusted_Connection=yes;'  # Sử dụng Windows Authentication
        )

        try:
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()

            insert_data = []
            for index, row in df.iterrows():
                # Kiểm tra sự tồn tại của các dòng dựa trên các cột
                check_query = """
                            SELECT COUNT(*)
                            FROM Phantichgia_state1
                            WHERE Macn = ? AND Mahang = ? AND dvt = ? AND Loai = ?
                            """
                check_values = (row['Macn'], row['Mahang'], row['dvt'], row['Loai'])
                cursor.execute(check_query, check_values)
                exists = cursor.fetchone()[0]

                if exists == 0:
                    # Nếu dòng không tồn tại, chuẩn bị dữ liệu để chèn
                    values = (
                        row['Macn'], row['Mahang'], row['dvt'], row['Khunggiaban'], row['Loai'], row['GIA']
                    )
                    insert_data.append(values)

            if insert_data:
                # Chèn tất cả các dòng mới
                sql_insert_query = """
                            INSERT INTO Phantichgia_state1 (Macn, Mahang, dvt, Khunggiaban, Loai, GIA)
                            VALUES (?, ?, ?, ?, ?, ?)
                            """
                cursor.executemany(sql_insert_query, insert_data)

            conn.commit()
            self.showMessageBox("Thêm thành công", "Dữ liệu đã được thêm thành công!")

        except pyodbc.Error as e:
            print(f"Error occurred: {e}")
            self.showMessageBox("Lỗi", f"Đã xảy ra lỗi khi thêm dữ liệu: {e}")

        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

    def delete_price(self):
        file_path = 'C:/Users/Admin/Downloads/merge_gia.xlsx'
        df = pd.read_excel(file_path)

        # Chỉ định kiểu dữ liệu cho từng cột
        df['Macn'] = df['Macn'].astype(str)
        df['Mahang'] = df['Mahang'].astype(str)
        df['dvt'] = df['dvt'].astype(str)
        df['Loai'] = df['Loai'].astype(str)

        conn_str = (
            r'DRIVER={SQL Server};'
            r'SERVER=XPS7590;'  # Thay đổi tên server của bạn
            r'DATABASE=UNIS_DATA;'  # Thay đổi tên cơ sở dữ liệu của bạn
            r'Trusted_Connection=yes;'  # Sử dụng Windows Authentication
        )

        try:
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()

            # Danh sách các dòng cần xóa
            delete_data = []

            for index, row in df.iterrows():
                # Kiểm tra sự tồn tại của dòng dựa trên các cột
                check_query = """
                            SELECT COUNT(*)
                            FROM Phantichgia_state1
                            WHERE Macn = ? AND Mahang = ? AND dvt = ? AND Loai = ?
                            """
                check_values = (row['Macn'], row['Mahang'], row['dvt'], row['Loai'])
                cursor.execute(check_query, check_values)
                exists = cursor.fetchone()[0]

                if exists > 0:
                    # Nếu dòng tồn tại, chuẩn bị dữ liệu để xóa
                    delete_data.append(check_values)

            if delete_data:
                # Xóa tất cả các dòng đã tìm thấy
                sql_delete_query = """
                            DELETE FROM Phantichgia_state1
                            WHERE Macn = ? AND Mahang = ? AND dvt = ? AND Loai = ?
                            """
                cursor.executemany(sql_delete_query, delete_data)

            conn.commit()
            self.showMessageBox("Xóa thành công", "Các dòng đã được xóa thành công!")

        except pyodbc.Error as e:
            print(f"Error occurred: {e}")
            self.showMessageBox("Lỗi", f"Đã xảy ra lỗi khi xóa dữ liệu: {e}")

        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

    def update_discount(self):

        # Đường dẫn đến tệp Python mà bạn muốn thực thi
        python_file_path_update_discount = "C:\\Users\\Admin\\PycharmProjects\\banggia\\EXCUTE_UI\\update_discount.py"  # Thay đổi đường dẫn theo tệp Python của bạn

        try:
            # Thực thi tệp Python
            result = subprocess.run(['python', python_file_path_update_discount], capture_output=True, text=True)

            # In kết quả của tệp Python (stdout và stderr)
            print("Output:")
            print(result.stdout)
            print("Errors:")
            print(result.stderr)

            if result.returncode == 0:
                self.showMessageBox("Thành công", "Dữ liệu đã được thêm giảm giá !")
            else:
                self.showMessageBox("Lỗi", "Dữ liệu lỗi không sửa")
        except Exception as e:
            print(f"Error occurred: {e}")
            self.showMessageBox("Lỗi", "Đã xảy ra lỗi khi thêm giảm giá")

    def merge_data(self):

        # Đường dẫn đến tệp Python mà bạn muốn thực thi
        python_file_path = "C:\\Users\\Admin\\PycharmProjects\\banggia\\combine_input.py"  # Thay đổi đường dẫn theo tệp Python của bạn

        try:
            # Thực thi tệp Python
            result = subprocess.run(['python', python_file_path], capture_output=True, text=True)

            # In kết quả của tệp Python (stdout và stderr)
            print("Output:")
            print(result.stdout)
            print("Errors:")
            print(result.stderr)

            if result.returncode == 0:
                self.showMessageBox("Thành công", "Dữ liệu đã được gộp")
            else:
                self.showMessageBox("Lỗi", "Dữ liệu lỗi không gộp")
        except Exception as e:
            print(f"Error occurred: {e}")
            self.showMessageBox("Lỗi", "Đã xảy ra lỗi khi gộp giá")

    def update_analysis_data(self):

        # Đường dẫn đến tệp Python mà bạn muốn thực thi
        python_file_path_update_pdf = "C:\\Users\\Admin\\PycharmProjects\\banggia\\EXCUTE_UI\\update_pdf.py"  # Thay đổi đường dẫn theo tệp Python của bạn

        try:
            # Thực thi tệp Python
            result = subprocess.run(['python', python_file_path_update_pdf], capture_output=True, text=True)

            # In kết quả của tệp Python (stdout và stderr)
            print("Output:")
            print(result.stdout)
            print("Errors:")
            print(result.stderr)

            if result.returncode == 0:
                self.showMessageBox("Thành công","Dữ liệu đã được update !")
            else:
                self.showMessageBox("Lỗi","Dữ liệu lỗi không thêm được")
        except Exception as e:
            print(f"Error occurred: {e}")
            self.showMessageBox("Lỗi", "Đã xảy ra lỗi khi thêm dữ liệu.")

    def update_push_data(self):

        # Đường dẫn đến tệp Python mà bạn muốn thực thi
        python_file_path_update_push = "C:\\Users\\Admin\\PycharmProjects\\banggia\\EXCUTE_UI\\update_push.py"  # Thay đổi đường dẫn theo tệp Python của bạn

        try:
            # Thực thi tệp Python
            result = subprocess.run(['python', python_file_path_update_push], capture_output=True, text=True)

            # In kết quả của tệp Python (stdout và stderr)
            print("Output:")
            print(result.stdout)
            print("Errors:")
            print(result.stderr)

            if result.returncode == 0:
                self.showMessageBox("Thành công", "Dữ liệu đã được update !")
            else:
                self.showMessageBox("Lỗi", "Dữ liệu lỗi không update được")
        except Exception as e:
            print(f"Error occurred: {e}")
            self.showMessageBox("Lỗi", "Đã xảy ra lỗi khi Update data push.")

    def export_push_data(self):
        try:
            # Thiết lập kết nối với SQL Server
            server = 'XPS7590'  # Thay thế bằng tên server của bạn
            database = 'UNIS_DATA'  # Thay thế bằng tên cơ sở dữ liệu
            username = 'TestLogin'  # Thay thế bằng tên tài khoản
            password = '686898'  # Thay thế bằng mật khẩu

            # Tạo chuỗi kết nối cho SQLAlchemy
            conn_str = f'mssql+pyodbc://{username}:{password}@{server}/{database}?driver=ODBC+Driver+17+for+SQL+Server'

            # Tạo engine
            engine = create_engine(conn_str)

            # Đọc dữ liệu từ bảng
            query = 'SELECT * FROM file_pushgia3'  # Thay thế bằng tên bảng bạn muốn xuất
            df = pd.read_sql(query, engine)

            # Xuất dữ liệu ra file Excel
            output_file = 'C:/Users/Admin/Desktop/file_pushgia3.xlsx'  # Tên file Excel đầu ra
            df.to_excel(output_file, index=False)

            # Hiển thị thông báo thành công
            self.showMessageBox("Thành công", "Dữ liệu đã được cập nhật!")

        except Exception as e:
            print(f"Error occurred: {e}")
            self.showMessageBox("Lỗi", "Đã xảy ra lỗi khi cập nhật dữ liệu.")

        # Tắt giao diện chính
        self.close()

        # Gọi hàm export_push_data1
        self.export_push_data1()

    def export_push_data1(self):
        # Đường dẫn đến tệp Python mà bạn muốn thực thi
        python_file_path_update_push1 = "C:\\Users\\Admin\\PycharmProjects\\banggia\\EXCUTE_UI\\update_push1.py"  # Thay đổi đường dẫn theo tệp Python của bạn

        try:
            # Thực thi tệp Python
            result = subprocess.run(['python', python_file_path_update_push1], capture_output=True, text=True)

            # In kết quả của tệp Python (stdout và stderr)
            print("Output:")
            print(result.stdout)
            print("Errors:")
            print(result.stderr)

            if result.returncode == 0:
                self.showMessageBox("Thành công", "Dữ liệu đã được update !")
            else:
                self.showMessageBox("Lỗi", "Dữ liệu lỗi không update được")
        except Exception as e:
            print(f"Error occurred: {e}")
            self.showMessageBox("Lỗi", "Đã xảy ra lỗi khi Update data push.")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    mainWindow = Ui_MainWindow()
    mainWindow.show()
    sys.exit(app.exec())
